using HtmlAgilityPack;
using Optional;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.ComponentModel;

namespace PDFRedaction
{
    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //    }
    //}
    public class PdfMasking /*: CodeActivity*/
    {
        // private static ActivityContext context;
        //[Category("Input")]
        //[RequiredArgument]
        //public InArgument<String> InputPDFPath { get; set; }
        //[Category("Output")]
        //[RequiredArgument]
        //public InArgument<String> OutputPDFPath { get; set; }
        ////public OutArgument<String> OutputPath { get; set; }

        //public static string inputDir { get; private set; }

        static void Main(string[] args)
        {
            //string inputFilePath = args[0];
            string inputFilePath = @"C:\Users\vinaym\Downloads\pdfs\APMPC17046200Q Rewalk Robotics - MRC - 50.pdf";
            string outputDirPath = @"C:\Users\vinaym\Desktop\test-folder\redacted-pdfs";
            //string outputDirPath = args[1];

            string redactedPDFNameEscaped = Regex.Replace(Path.GetFileName(inputFilePath), "%", "%%");
            string redactedPDFPath = $@"{outputDirPath}\{redactedPDFNameEscaped}";

            string jpgFilesDir = ConvertPDFToJPGs(inputFilePath);
            var redactedJPGFiles = RedactPremium(jpgFilesDir);
            ConvertJPGsToPDF(redactedJPGFiles, redactedPDFPath);
            //Directory.Delete(jpgFilesDir, recursive: true)
            //Directory.Delete(jpgFilesDir, recursive: true);

        }


        private static string ConvertPDFToJPGs(string pdfFilePath)
        {
            string pdfFileDirectory = Path.GetDirectoryName(pdfFilePath);
            string pdfFileName = Path.GetFileName(pdfFilePath);

            Guid guid = Guid.NewGuid();
            string jpegFilesDirName = guid.ToString().Substring(0, 3) + "_" + Path.GetFileNameWithoutExtension(pdfFilePath);
            string jpegFilesDirPath = Path.Combine(pdfFileDirectory, jpegFilesDirName);
            Directory.CreateDirectory(jpegFilesDirPath);

            string magickCommand = @"C:\Program Files\ImageMagick-7.0.7-Q16\magick.exe";
            string magickCommandArgs = $@"convert -limit memory unlimited -density 300 -quality 100 ""{pdfFilePath}"" ""{jpegFilesDirPath}\{jpegFilesDirName}.jpg""";
            Utils.RunCommand(magickCommand, magickCommandArgs, ConfigurationSettings.AppSettings["image_magick_install_dir"]);
            return jpegFilesDirPath;
        }

        private static void ConvertJPGsToPDF(List<String> jpgFilePaths, string redactedPDFPath)
        {
            string spaceSepJPGFiles = jpgFilePaths.Aggregate("", (acc, jpgFilePath) => $@"{acc}""{jpgFilePath}"" ").Trim();

            string magickCommand = @"C:\Program Files\ImageMagick-7.0.7-Q16\magick.exe";
            string magickCommandArgs = $@"convert -limit memory unlimited -interlace Plane -sampling-factor 4:2:0 -quality 70 -density 150x150 -units PixelsPerInch -resize 1241x1754 -repage 1241x1754 {spaceSepJPGFiles} ""{redactedPDFPath}""";
            Utils.RunCommand(magickCommand, magickCommandArgs, ConfigurationSettings.AppSettings["image_magick_install_dir"]);
        }

        private static List<string> RedactPremium(string jpgFilesDir)
        {
            var jpgFiles = Directory.EnumerateFiles(jpgFilesDir)
                .OrderBy(file => Utils.ParsePageNumber(file))
                .ToList();

            foreach (string jpgFile in jpgFiles)
            {
                string hocrFile = ConvertJPGToHocr(jpgFile);

                var premiumCoordinatesOpt = GetPremiumCoordinatesIfPresent(hocrFile);
                premiumCoordinatesOpt.MatchSome(premiumCoord => ChangePixelColor(jpgFile, premiumCoord));

                if (premiumCoordinatesOpt.HasValue)
                    break;
            }
            return jpgFiles;
        }

        private static void ChangePixelColor(string jpgFile, Coordinates coordinates)
        {
            try
            {
                Bitmap sourceBitmap = (Bitmap)Image.FromFile(jpgFile);
                Bitmap dupBitmap = new Bitmap(sourceBitmap.Width, sourceBitmap.Height, sourceBitmap.PixelFormat);

                using (var gr = Graphics.FromImage(dupBitmap))
                    gr.DrawImage(sourceBitmap, new Rectangle(0, 0, sourceBitmap.Width, sourceBitmap.Height));

                sourceBitmap.Dispose();
                File.Delete(jpgFile);

                for (int i = coordinates.LeftX; i <= coordinates.RightX; i++)
                    for (int j = coordinates.LeftY; j <= coordinates.RightY; j++)
                        dupBitmap.SetPixel(i, j, Color.White);

                dupBitmap.Save(jpgFile);
            }
            catch (Exception exception)
            {
                Console.WriteLine("Exception occured while chaning pixel color");
                Console.WriteLine(exception.StackTrace);
                throw exception;
            }
        }

        private static Option<Coordinates> GetPremiumCoordinatesIfPresent(string hocrFile)
        {
            string hocrContent = File.ReadAllText(hocrFile);
            var doc = new HtmlDocument();
            doc.LoadHtml(hocrContent);

            var wordSpans = doc.DocumentNode.SelectNodes("//span[@class='ocrx_word']");

            var textVsCoordinates = wordSpans.Select(wordSpan =>
            {
                var wordSpanTitle = wordSpan.GetAttributeValue("title", "");
                return Tuple.Create(wordSpan.InnerText.Trim(), Utils.ParseCoordinates(wordSpanTitle));

            }).OrderBy(txtVsCoord => txtVsCoord.Item2, new CooridnatesYComparer())
            .ThenBy(txtVsCoord => txtVsCoord.Item2, new CoordinatesXComparer()).ToArray();

            var combinedText = textVsCoordinates.Select(textVsCoord => textVsCoord.Item1)
                .Aggregate("", (acc, text) => $"{acc}{text}~");

            var premiumStartWordIndexOpt = Utils.FindPremiumStartWordIndex(combinedText);

            return premiumStartWordIndexOpt.Map(premiumStartWordIndex =>
            {
                var startCoord = textVsCoordinates[premiumStartWordIndex].Item2;
                var lineSpan = wordSpans.First(wordSpan => wordSpan.GetAttributeValue("title", "")
                .Contains(startCoord.ToString())).ParentNode;

                var wordsOtherThanPremium = lineSpan.SelectNodes("span[@class='ocrx_word']").Where(childNode =>
                {
                    var text = Regex.Replace(childNode.InnerText.Trim().ToLower(), @"[^a-zA-Z0-9]+", "");
                    return !string.IsNullOrEmpty(text) && text != "premium";
                });

                var firstWordCoord = Utils.ParseCoordinates(wordsOtherThanPremium.First().GetAttributeValue("title", ""));
                var lastWordCoord = Utils.ParseCoordinates(wordsOtherThanPremium.Last().GetAttributeValue("title", ""));
                return new Coordinates(firstWordCoord.LeftX, firstWordCoord.LeftY,
                    lastWordCoord.RightX, lastWordCoord.RightY);
            });
        }

        private static string ConvertJPGToHocr(string jpegFilePath)
        {
            string hocrFilePath = jpegFilePath.Replace(Path.GetExtension(jpegFilePath), "");

            string tesseractCommand = @"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe";
            string tesseractArgs = $@"""{jpegFilePath}"" ""{hocrFilePath}"" -l eng -psm 1 hocr";
            Utils.RunCommand(tesseractCommand, tesseractArgs, ConfigurationSettings.AppSettings["tesseract_install_dir"]);
            return $"{hocrFilePath}.hocr";
        }


    }

    class Coordinates
    {
        public int LeftX { get; }
        public int LeftY { get; }
        public int RightX { get; }
        public int RightY { get; }

        public Coordinates(int leftX, int leftY, int rightX, int rightY)
        {
            this.LeftX = leftX;
            this.LeftY = leftY;
            this.RightX = rightX;
            this.RightY = rightY;
        }

        public override string ToString()
        {
            return $"{LeftX} {LeftY} {RightX} {RightY}";
        }
    }

    class CooridnatesYComparer : IComparer<Coordinates>
    {
        public int Compare(Coordinates coord1, Coordinates coord2)
        {
            if (Math.Abs(coord1.LeftY - coord2.LeftY) <= 30 || coord1.LeftY == coord2.LeftY)
                return 0;
            else if (coord1.LeftY < coord2.LeftY)
                return -1;
            else
                return 1;
        }
    }

    class CoordinatesXComparer : IComparer<Coordinates>
    {
        public int Compare(Coordinates coord1, Coordinates coord2)
        {
            if (coord1.LeftX < coord2.LeftX)
                return -1;
            else if (coord1.LeftX == coord2.LeftX)
                return 0;
            else
                return 1;
        }
    }

    class Utils
    {
        public static void RunCommand(string Command, string Args, string CommandDir)
        {
            string output = "";
            string error = "";
            try
            {

                ProcessStartInfo startInfo = new ProcessStartInfo(Command, Args);
                startInfo.WindowStyle = ProcessWindowStyle.Hidden;
                startInfo.CreateNoWindow = true;
                startInfo.UseShellExecute = false;
                //startInfo.RedirectStandardOutput = true;
                //startInfo.RedirectStandardError = true;

                Process process = new Process();
                process.StartInfo = startInfo;
                process.Start();
                //output = process.StandardOutput.ReadToEnd();
                //error = process.StandardError.ReadToEnd();
                process.WaitForExit();

                GC.Collect();
            }
            catch (Exception exception)
            {
                Console.WriteLine("Standard Output " + output);
                Console.WriteLine("Standard Error " + error);
                Console.WriteLine($"Exception occured while executing {Command} {Args}");
                Console.WriteLine(exception.StackTrace);
                throw exception;
            }
        }

        public static int ParsePageNumber(string FileName)
        {
            string trimmedFileName = Path.GetFileNameWithoutExtension(FileName);
            return int.Parse(trimmedFileName.Substring(trimmedFileName.LastIndexOf("-") + 1));
        }

        public static Coordinates ParseCoordinates(string Title)
        {
            var coordinates = Title.Replace("bbox", string.Empty).Trim().Split(';').First().Split(' ')
                .Select(coord => int.Parse(coord.Trim())).ToArray();

            return new Coordinates(coordinates[0], coordinates[1], coordinates[2], coordinates[3]);
        }

        private static int WordIndexFromOffset(string Text, int Offset)
        { // change this to a functional style using zip with indexes and count with predicate
            int wordIndex = 0;
            for (int i = 0; i <= Offset; i++)
                if (Text[i] == '~') wordIndex++;
            return wordIndex;
        }

        //public static Option<int> FindPremiumStartWordIndex(string Text)
        //{
        //    var match = Regex.Match(Text, @"((?i)premium)[~]?\s*:[~]?\s*(?'premium'(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
        //    if (match.Success)
        //    {
        //        var premiumGroup = match.Groups["premium"];
        //        int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
        //        return Option.Some(premiumStartWordIndex);
        //    }
        //    else
        //    {
        //        return Option.None<int>();
        //    }
        //}
        //public static Option<int> FindPremiumStartWordIndex(string Text)
        //{
        //    if (Text.IndexOf("~PREMIUM~:~") >= 0 && Text.Substring(Text.IndexOf("~PREMIUM~:~"), 15).Contains("%"))
        //    {
        //        var match = Regex.Match(Text, @"(?:PREMIUM)[~]?\s*:[~]?\s*(?'premium'(\d{1,3})%[~]?\s*Annual[~]?\s*Premium[~]?\s*(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
        //        if (match.Success)
        //        {
        //            var premiumGroup = match.Groups["premium"];
        //            int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
        //            return Option.Some(premiumStartWordIndex);
        //        }
        //        else
        //        {
        //            return Option.None<int>();
        //        }
        //    }
        //    else if (Text.IndexOf("~PREMIUM~:~") >= 0)
        //    {
        //        var match = Regex.Match(Text, @"((?i)premium)[~]?\s*:[~]?\s*(?'premium'(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
        //        if (match.Success)
        //        {
        //            var premiumGroup = match.Groups["premium"];
        //            int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
        //            return Option.Some(premiumStartWordIndex);
        //        }
        //        else
        //        {
        //            return Option.None<int>();
        //        }
        //    }
        //    else
        //    {
        //        return Option.None<int>();
        //    }
        //    //string currencies = "GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS";
        //    //if (Text.IndexOf("~PREMIUM~:~") >= 0 && currencies.Contains(Text.Substring(Text.IndexOf("~PREMIUM~:~"), 15).Replace('~', '|').Split(':')[1]))
        //    //{
        //    //    var match = Regex.Match(Text, @"((?i)premium)[~]?\s*:[~]?\s*(?'premium'(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
        //    //    if (match.Success)
        //    //    {
        //    //        var premiumGroup = match.Groups["premium"];
        //    //        int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
        //    //        return Option.Some(premiumStartWordIndex);
        //    //    }
        //    //    else
        //    //    {
        //    //        return Option.None<int>();
        //    //    }
        //    //}

        //}
        public static Option<int> FindPremiumStartWordIndex(string Text)
        {
            string currencies = "GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS";
            if (Text.IndexOf("~PREMIUM~:-~") >= 0 && Text.Substring(Text.IndexOf("~PREMIUM~:-~"), 16).Contains("%"))
            {
                var match = Regex.Match(Text, @"(?:PREMIUM)[~]?\s*:[-][~]?\s*(?'premium'(\d{1,3})%[~]?\s*Annual[~]?\s*Premium[~]?\s*(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
                if (match.Success)
                {
                    var premiumGroup = match.Groups["premium"];
                    int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
                    return Option.Some(premiumStartWordIndex);
                }
                else
                {
                    return Option.None<int>();
                }
            }
            else if (Text.IndexOf("~PREMIUM~:~") >= 0 && currencies.Contains(Text.Substring(Text.IndexOf("~PREMIUM~:~"), 15).Replace('~', '|').Split(':')[1]))
            {
                var match = Regex.Match(Text, @"((?i)premium)[~]?\s*:[~]?\s*(?'premium'(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
                if (match.Success)
                {
                    var premiumGroup = match.Groups["premium"];
                    int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
                    return Option.Some(premiumStartWordIndex);
                }
                else
                {
                    return Option.None<int>();
                }
            }
            else if (Text.IndexOf("~PREMIUM~:~") >= 0 && Text.Substring(Text.IndexOf("~PREMIUM~:~"), 15).Contains("%"))
            {
                var match = Regex.Match(Text, @"(?:PREMIUM)[~]?\s*:[~]?\s*(?'premium'(\d{1,3})%[~]?\s*Annual[~]?\s*Premium[~]?\s*(([^\s]+\s*){0,5}?)(GBP|CAD|RMB|ALL|DZD|ARS|AWG|AUD|EUR|BHD|BYR|BOB|BAM|BRL|BGN|CLP|CNY|COP|CRC|HRK|CUP|CZK|DKK|DOP|USD|EGP|SVC|GTQ|HNL|HKD|HUF|ISK|INR|IDR|IQD|ILS|JPY|JMD|JOD|KWD|LBP|LYD|MKD|MYR|MXN|MAD|NZD|NIO|NOK|OMR|PAB|PYG|PEN|PHP|PLN|QAR|RON|RUB|SAR|RSD|CSD|SGD|ZAR|KRW|SDG|SEK|CHF|SYP|TWD|THB|TND|NTD|TRY|UAH|AED|UYU|VEF|VND|YER|QTZ|MXP|TTD|NIS)[~]?\s*[~]?(\d+(?:[, .]+\d+)*))");
                if (match.Success)
                {
                    var premiumGroup = match.Groups["premium"];
                    int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
                    return Option.Some(premiumStartWordIndex);
                }
                else
                {
                    return Option.None<int>();
                }
            }
            else if (Text.IndexOf("~PREMIUM~:~") >= 0 && Text.Substring(Text.IndexOf("~PREMIUM~:~"), 18).Contains("Annual"))
            {
                var match = Regex.Match(Text, @"(?:PREMIUM)[~]?\s*:[~][-]\s*Annual[~]?\s*Premium[~]?\s*(([^\s]+\s*){0,5}?)(\d+(?:[, .]+\d+)*)");
                if (match.Success)
                {
                    var premiumGroup = match.Groups["premium"];
                    int premiumStartWordIndex = WordIndexFromOffset(Text, premiumGroup.Index);
                    return Option.Some(premiumStartWordIndex);
                }
                else
                {
                    return Option.None<int>();
                }
            }
            else
            {
                return Option.None<int>();
            }
        }
    }
}
